@page "/"
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Home - LieAsocial</PageTitle>

<style>
    body {
        background-color: hsl(0, 0%, 0%) !important;
    }
</style>

@if (AuthService.IsAuthenticated)
{
    <div class="container mt-3">
        <div class="row">
            <div class="col-md-8">
                <!-- Post Creation Card -->
                <div class="card mb-4 border-0" style="background-color: hsl(0, 0%, 7%); color: hsl(0, 0%, 80%);">
                    <div class="card-header border-0" style="background-color: hsl(0, 0%, 0%); color: hsl(0, 0%, 100%);">
                        <h5 class="card-title mb-0"></h5>
                        <h5 style="color: hsl(0, 0%, 100%);">What's happening?</h5>
                        
                    </div>
                    <div class="card-body" style="background-color: hsl(0, 0%, 10%);">
                        <EditForm Model="@this" OnValidSubmit="@CreatePost">
                            <div class="mb-3">
                                <InputTextArea @bind-Value="newPostContent" class="form-control"
                                               rows="3" placeholder="Share your thoughts..." maxlength="280"
                                               style="background-color: hsl(0, 0%, 13%); color: hsl(0, 0%, 87%); border-color: hsl(0, 0%, 20%);" />
                                <div class="form-text" style="color: hsl(0, 0%, 47%);">@(280 - newPostContent.Length) characters remaining</div>
                            </div>
                            <div class="d-flex justify-content-between align-items-center">
                                <small style="color: hsl(0, 0%, 47%);">Posting as @AuthService.CurrentUser?.DisplayName</small>
                                <button type="submit" class="btn" disabled="@(string.IsNullOrWhiteSpace(newPostContent) || isPosting)"
                                        style="background-color: hsl(0, 0%, 20%); color: hsl(0, 0%, 100%); border: none;">
                                    @if (isPosting)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Posting...</span>
                                    }
                                    else
                                    {
                                        <span>Post</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>

                <!-- Posts Feed -->
                <div class="posts-feed">
                    @if (posts.Any())
                    {
                        @foreach (var post in posts)
                        {
                            <div class="card mb-3 border-0" style="background-color: hsl(0, 0%, 7%);">
                                <div class="card-body">
                                    <div class="d-flex align-items-start">
                                        <div class="avatar me-3">
                                            @if (!string.IsNullOrEmpty(post.ProfilePictureUrl))
                                            {
                                                <img src="@post.ProfilePictureUrl" alt="@post.DisplayName" class="rounded-circle" width="40" height="40">
                                            }
                                            else
                                            {
                                                <div class="rounded-circle d-flex align-items-center justify-content-center"
                                                     style="width: 40px; height: 40px; background-color: hsl(0, 0%, 20%);">
                                                    <span class="text-white fw-bold">@post.DisplayName.First()</span>
                                                </div>
                                            }
                                        </div>
                                        <div class="flex-grow-1">
                                            <div class="d-flex align-items-center mb-2">
                                                <strong class="me-2" style="color: hsl(0, 0%, 87%);">@post.DisplayName</strong>
                                                <small style="color: hsl(0, 0%, 47%);">@@@post.Username</small>
                                                <small class="ms-2" style="color: hsl(0, 0%, 47%);">• @GetRelativeTime(post.DateCreated)</small>
                                                @if (post.UserId == AuthService.CurrentUser?.UserId)
                                                {
                                                    <button class="btn btn-sm ms-auto"
                                                            style="background-color: hsl(0, 0%, 13%); color: hsl(0, 60%, 70%); border: 1px solid hsl(0, 0%, 20%);"
                                                            @onclick="@(() => DeletePost(post.PostId))">
                                                        Delete
                                                    </button>
                                                }
                                            </div>
                                            <p class="mb-2" style="color: hsl(0, 0%, 80%);">@((MarkupString)System.Web.HttpUtility.HtmlEncode(post.Content))</p>
                                            <div class="d-flex align-items-center">
                                                <button class="btn btn-sm me-3"
                                                        style="@(post.IsLikedByCurrentUser ? "background-color: hsl(0, 60%, 20%); color: hsl(0, 60%, 70%); border: 1px solid hsl(0, 60%, 30%);" : "background-color: hsl(0, 0%, 13%); color: hsl(0, 0%, 70%); border: 1px solid hsl(0, 0%, 20%);")"
                                                        @onclick="@(() => ToggleLike(post))">
                                                    <i class="@(post.IsLikedByCurrentUser ? "fas" : "far") fa-heart me-1"></i>
                                                    @post.LikeCount
                                                </button>
                                                <button class="btn btn-sm me-3"
                                                        style="background-color: hsl(0, 0%, 13%); color: hsl(0, 0%, 70%); border: 1px solid hsl(0, 0%, 20%);">
                                                    <i class="far fa-comment me-1"></i>
                                                    @post.CommentCount
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="text-center py-5">
                            <h4 style="color: hsl(0, 0%, 87%);">No posts yet</h4>
                            <p style="color: hsl(0, 0%, 47%);">Be the first to share something!</p>
                        </div>
                    }
                </div>

                @if (posts.Any())
                {
                    <div class="text-center mt-4">
                        <button class="btn" @onclick="LoadMorePosts" disabled="@isLoadingMore"
                                style="background-color: hsl(0, 0%, 13%); color: hsl(0, 0%, 87%); border: 1px solid hsl(0, 0%, 27%);">
                            @if (isLoadingMore)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                <span>Loading...</span>
                            }
                            else
                            {
                                <span>Load More</span>
                            }
                        </button>
                    </div>
                }
            </div>

            <!-- Sidebar -->
            <div class="col-md-4">
                <!-- Profile Card -->
                <div class="card border-0" style="background-color: hsl(0, 0%, 7%);">
                    <div class="card-header border-0" style="background-color: hsl(0, 0%, 0%); color: hsl(0, 0%, 100%);">
                        <h5 class="card-title mb-0"></h5>
                        <h5 style="color: hsl(0, 0%, 100%);">Your Profile</h5>
                    </div>
                    <div class="card-body" style="background-color: hsl(0, 0%, 10%);">
                        <div class="d-flex align-items-center mb-3">
                            @if (!string.IsNullOrEmpty(AuthService.CurrentUser?.ProfilePictureUrl))
                            {
                                <img src="@AuthService.CurrentUser.ProfilePictureUrl" alt="@AuthService.CurrentUser.DisplayName"
                                     class="rounded-circle me-3" width="50" height="50">
                            }
                            else
                            {
                                <div class="rounded-circle d-flex align-items-center justify-content-center me-3"
                                     style="width: 50px; height: 50px; background-color: hsl(0, 0%, 20%);">
                                    <span class="text-white fw-bold">@AuthService.CurrentUser?.DisplayName?.First()</span>
                                </div>
                            }
                            <div>
                                <strong style="color: hsl(0, 0%, 87%);">@AuthService.CurrentUser?.DisplayName</strong>
                                <br>
                                <small style="color: hsl(0, 0%, 47%);">@@@AuthService.CurrentUser?.Username</small>
                            </div>
                        </div>
                        @if (!string.IsNullOrEmpty(AuthService.CurrentUser?.Bio))
                        {
                            <p style="color: hsl(0, 0%, 47%);">@AuthService.CurrentUser.Bio</p>
                        }
                        <a href="/profile" class="btn btn-sm"
                           style="background-color: hsl(0, 0%, 13%); color: hsl(0, 0%, 87%); border: 1px solid hsl(0, 0%, 27%);">
                            Edit Profile
                        </a>
                    </div>
                </div>

                <!-- Trending Card -->
                <div class="card mt-3 border-0" style="background-color: hsl(0, 0%, 100%);">
                    <div class="card-header border-0" style="background-color: hsl(0, 0%, 0%); color: hsl(0, 0%, 100%);">
                        <h5 class="card-title mb-0"></h5>
                        <h5 style="color: hsl(0, 0%, 100%);">Trending</h5>
                    </div>
                    <div class="card-body" style="background-color: hsl(0, 0%, 10%);">
                        <p style="color: hsl(0, 0%, 100%);">Coming soon...</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-8 text-center">
                <h1 class="display-4 mb-4" style="color: hsl(0, 0%, 87%);">Welcome to LieAsocial</h1>
                <p class="lead mb-4" style="color: hsl(0, 0%, 67%);">Connect with friends and share what's happening in your world.</p>
                <div class="d-flex justify-content-center gap-3">
                    <a href="/login" class="btn btn-lg"
                       style="background-color: hsl(0, 0%, 13%); color: hsl(0, 0%, 87%); border: 1px solid hsl(0, 0%, 27%);">
                        Login
                    </a>
                    <a href="/registration" class="btn btn-lg"
                       style="background-color: hsl(0, 0%, 0%); color: hsl(0, 0%, 100%); border: 1px solid hsl(0, 0%, 27%);">
                        Sign Up
                    </a>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Post> posts = new();
    private string newPostContent = string.Empty;
    private bool isPosting = false;
    private bool isLoadingMore = false;
    private int currentPage = 1;
    private PostService? postService;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        if (AuthService.IsAuthenticated)
        {
            var connectionString = Configuration.GetConnectionString("OdbcConnection");
            if (!string.IsNullOrEmpty(connectionString))
            {
                postService = new PostService(connectionString);
                await LoadPosts();
            }
        }

        AuthService.UserChanged += OnUserChanged;
    }

    private async void OnUserChanged(User? user)
    {
        if (user != null && postService != null)
        {
            await LoadPosts();
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task LoadPosts()
    {
        if (postService != null && AuthService.CurrentUser != null)
        {
            try
            {
                posts = postService.GetPosts(AuthService.CurrentUser.UserId, 1, 20);
                currentPage = 1;
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading posts: {ex.Message}");
            }
        }
    }

    private async Task LoadMorePosts()
    {
        if (postService != null && AuthService.CurrentUser != null)
        {
            isLoadingMore = true;
            try
            {
                currentPage++;
                var newPosts = postService.GetPosts(AuthService.CurrentUser.UserId, currentPage, 20);
                posts.AddRange(newPosts);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading more posts: {ex.Message}");
                currentPage--;
            }
            finally
            {
                isLoadingMore = false;
            }
        }
    }

    private async Task CreatePost()
    {
        if (postService != null && AuthService.CurrentUser != null && !string.IsNullOrWhiteSpace(newPostContent))
        {
            isPosting = true;
            try
            {
                bool success = postService.CreatePost(AuthService.CurrentUser.UserId, newPostContent.Trim());
                if (success)
                {
                    newPostContent = string.Empty;
                    await LoadPosts();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error creating post: {ex.Message}");
            }
            finally
            {
                isPosting = false;
            }
        }
    }

    private async Task ToggleLike(Post post)
    {
        if (postService != null && AuthService.CurrentUser != null)
        {
            try
            {
                if (post.IsLikedByCurrentUser)
                {
                    postService.UnlikePost(post.PostId, AuthService.CurrentUser.UserId);
                    post.LikeCount--;
                    post.IsLikedByCurrentUser = false;
                }
                else
                {
                    postService.LikePost(post.PostId, AuthService.CurrentUser.UserId);
                    post.LikeCount++;
                    post.IsLikedByCurrentUser = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error toggling like: {ex.Message}");
            }
        }
    }

    private async Task DeletePost(int postId)
    {
        if (postService != null && AuthService.CurrentUser != null)
        {
            try
            {
                bool success = postService.DeletePost(postId, AuthService.CurrentUser.UserId);
                if (success) posts.RemoveAll(p => p.PostId == postId);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error deleting post: {ex.Message}");
            }
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;

        if (timeSpan.TotalMinutes < 1) return "just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d";
        return dateTime.ToString("MMM d");
    }

    public void Dispose() => AuthService.UserChanged -= OnUserChanged;
}