@page "/trending"
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Trending - LieAsocial</PageTitle>

@if (AuthService.IsAuthenticated)
{
    <div class="container mt-4">
        <div class="row">
            <div class="col-md-8">
                <h2>Trending Posts</h2>

                @if (trendingPosts.Any())
                {
                    @foreach (var post in trendingPosts)
                    {
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="d-flex align-items-start">
                                    <div class="avatar me-3">
                                        @if (!string.IsNullOrEmpty(post.ProfilePictureUrl))
                                        {
                                            <img src="@post.ProfilePictureUrl" alt="@post.DisplayName" class="rounded-circle" width="50" height="50">
                                        }
                                        else
                                        {
                                            <div class="bg-primary rounded-circle d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                                                <span class="text-white fw-bold">@post.DisplayName.First()</span>
                                            </div>
                                        }
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex align-items-center mb-2">
                                            <strong class="me-2">@post.DisplayName</strong>
                                            <small class="text-muted">@@@post.Username</small>
                                            <small class="text-muted ms-2">• @GetRelativeTime(post.DateCreated)</small>
                                        </div>
                                        <p class="mb-3">@post.Content</p>
                                        <div class="d-flex align-items-center">
                                            <button class="btn btn-sm @(post.IsLikedByCurrentUser ? "btn-danger" : "btn-outline-secondary") me-3" @onclick="@(() => ToggleLike(post))">
                                                <i class="@(post.IsLikedByCurrentUser ? "fas" : "far") fa-heart me-1"></i>
                                                @post.LikeCount
                                            </button>
                                            <small class="text-muted">
                                                <i class="far fa-comment me-1"></i>
                                                @post.CommentCount comments
                                            </small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-center py-5">
                        <i class="fas fa-chart-line fa-3x text-muted mb-3"></i>
                        <h4>No trending posts yet</h4>
                        <p class="text-muted">Posts with high engagement will appear here.</p>
                        <a href="/" class="btn btn-primary">Go to Home</a>
                    </div>
                }
            </div>

            <div class="col-md-4">
                <div class="card">
                    <div class="card-body">
                        <h6 class="card-title">Trending Topics</h6>
                        <p class="text-muted">Popular topics will appear here soon.</p>
                    </div>
                </div>

                <div class="card mt-3">
                    <div class="card-body">
                        <h6 class="card-title">Active Users</h6>
                        <p class="text-muted">Most active users will be shown here.</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6 text-center">
                <h3>Access Denied</h3>
                <p>You need to be logged in to view trending content.</p>
                <a href="/login" class="btn btn-primary">Login</a>
            </div>
        </div>
    </div>
}

@code {
    private List<Post> trendingPosts = new();
    private PostService? postService;

    protected override async Task OnInitializedAsync()
    {
        await AuthService.InitializeAsync();
        if (AuthService.IsAuthenticated)
        {
            var connectionString = Configuration.GetConnectionString("OdbcConnection");
            if (!string.IsNullOrEmpty(connectionString))
            {
                postService = new PostService(connectionString);
                await LoadTrendingPosts();
            }
        }
        else Navigation.NavigateTo("/login");
    }

    private async Task LoadTrendingPosts()
    {
        if (postService != null && AuthService.CurrentUser != null)
        {
            try
            {
                var allPosts = postService.GetPosts(AuthService.CurrentUser.UserId, 1, 50);
                trendingPosts = allPosts.Where(p => p.LikeCount > 0 || p.CommentCount > 0).OrderByDescending(p => p.LikeCount + p.CommentCount).Take(10).ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading trending posts: {ex.Message}");
            }
        }
    }

    private async Task ToggleLike(Post post)
    {
        if (postService != null && AuthService.CurrentUser != null)
        {
            try
            {
                if (post.IsLikedByCurrentUser)
                {
                    postService.UnlikePost(post.PostId, AuthService.CurrentUser.UserId);
                    post.LikeCount--;
                    post.IsLikedByCurrentUser = false;
                }
                else
                {
                    postService.LikePost(post.PostId, AuthService.CurrentUser.UserId);
                    post.LikeCount++;
                    post.IsLikedByCurrentUser = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error toggling like: {ex.Message}");
            }
        }
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var timeSpan = DateTime.Now - dateTime;
        if (timeSpan.TotalMinutes < 1) return "just now";
        if (timeSpan.TotalMinutes < 60) return $"{(int)timeSpan.TotalMinutes}m";
        if (timeSpan.TotalHours < 24) return $"{(int)timeSpan.TotalHours}h";
        if (timeSpan.TotalDays < 7) return $"{(int)timeSpan.TotalDays}d";
        return dateTime.ToString("MMM d");
    }
}